(window.webpackJsonp=window.webpackJsonp||[]).push([[145],{427:function(v,_,a){"use strict";a.r(_);var t=a(12),r=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"언어"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#언어"}},[v._v("#")]),v._v(" 언어")]),v._v(" "),_("p",[_("br"),_("br")]),v._v(" "),_("h3",{attrs:{id:"java"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java"}},[v._v("#")]),v._v(" [JAVA]")]),v._v(" "),_("hr"),v._v(" "),_("h3",{attrs:{id:"가비지-컬렉션이란"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#가비지-컬렉션이란"}},[v._v("#")]),v._v(" 가비지 컬렉션이란?")]),v._v(" "),_("blockquote",[_("p",[v._v("배경 & 질문 의도")])]),v._v(" "),_("ul",[_("li",[v._v("JVM 의 구조, 특히 Heap Area 에 대한 이해")])]),v._v(" "),_("blockquote",[_("p",[v._v("답변")])]),v._v(" "),_("ul",[_("li",[v._v("자바가 실행되는 JVM 에서 사용되는 객체, 즉 Heap 영역의 객체를 관리해 주는 기능을 말합니다.")]),v._v(" "),_("li",[v._v("이 과정에서 stop the world 가 일어나게 되며, 이 일련 과정을 효율적으로 하기 위해서는 가비지 컬렉터 변경 또는 세부 값 조정이 필요합니다.")])]),v._v(" "),_("blockquote",[_("p",[v._v("키워드 & 꼬리 질문")])]),v._v(" "),_("ul",[_("li",[v._v("가비지 컬렉션 과정, 가비지 컬렉터 종류에 대한 이해")])]),v._v(" "),_("br"),v._v(" "),_("h3",{attrs:{id:"stringbuilder와-stringbuffer의-차이는"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#stringbuilder와-stringbuffer의-차이는"}},[v._v("#")]),v._v(" StringBuilder와 StringBuffer의 차이는?")]),v._v(" "),_("blockquote",[_("p",[v._v("배경 & 질문 의도")])]),v._v(" "),_("ul",[_("li",[v._v("mutation(가변), immutation(불변) 이해")]),v._v(" "),_("li",[v._v("불변 객체인 String 의 연산에서 오는 퍼포먼스 이슈 이해")]),v._v(" "),_("li",[v._v("String\n"),_("ul",[_("li",[v._v("immutation")]),v._v(" "),_("li",[v._v("String 문자열을 연산하는 과정에서 불변 객체의 반복 생성으로 퍼포먼스가 낮아짐.")])])])]),v._v(" "),_("blockquote",[_("p",[v._v("답변")])]),v._v(" "),_("ul",[_("li",[v._v("같은점\n"),_("ul",[_("li",[v._v("mutation")]),v._v(" "),_("li",[v._v("append() 등의 api 지원")])])]),v._v(" "),_("li",[v._v("차이점\n"),_("ul",[_("li",[v._v("StringBuilder 는 동기화를 지원하지 않아 싱글 스레드에서 속도가 빠릅니다.")]),v._v(" "),_("li",[v._v("StringBuffer 는 멀티 스레드 환경에서의 동기화를 지원하지만 이런 구현은 로직을 의심해야 합니다.")])])])]),v._v(" "),_("blockquote",[_("p",[v._v("키워드 & 꼬리 질문")])]),v._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://hyune-c.tistory.com/entry/String-%EC%9D%84-%EC%9E%98-%EC%8D%A8%EB%B3%B4%EC%9E%90",target:"_blank",rel:"noopener noreferrer"}},[v._v("실무에서의 String 연산"),_("OutboundLink")],1)])]),v._v(" "),_("br"),v._v(" "),_("h3",{attrs:{id:"java의-메모리-영역은"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java의-메모리-영역은"}},[v._v("#")]),v._v(" Java의 메모리 영역은?")]),v._v(" "),_("blockquote",[_("p",[v._v("배경 & 질문 의도")])]),v._v(" "),_("ul",[_("li",[v._v("JVM 구조의 이해")])]),v._v(" "),_("blockquote",[_("p",[v._v("답변")])]),v._v(" "),_("ul",[_("li",[v._v("메소드, 힙, 스택, pc 레지스터, 네이티브 영역으로 구분됩니다.\n"),_("ul",[_("li",[v._v("메소드 영역은 클래스가 로딩될 때 생성되며 주로 static 변수가 저장됩니다.")]),v._v(" "),_("li",[v._v("힙 영역은 런타임시 할당되며 주로 객체가 저장됩니다.")]),v._v(" "),_("li",[v._v("스택 영역은 컴파일시 할당되며 메소드 호출시 지역변수가 저장됩니다.")]),v._v(" "),_("li",[v._v("pc 레지스터는 스레드가 생성될 때마다 생성되는 영역으로 다음 명령어의 주소를 알고 있습니다.")]),v._v(" "),_("li",[v._v("네이티브 영역은 자바 외 언어로 작성된 코드를 위한 영역입니다.")])])]),v._v(" "),_("li",[v._v("힙과 스택은 같은 메모리 공간을 동적으로 공유하며, 과도하게 사용하는 경우 OOM 이 발생할 수 있습니다.")]),v._v(" "),_("li",[v._v("힙 영역은 GC 를 통해 정리됩니다.")])]),v._v(" "),_("blockquote",[_("p",[v._v("키워드 & 꼬리 질문")])]),v._v(" "),_("ul",[_("li",[v._v("Method Area (Class Area)\n"),_("ul",[_("li",[v._v("클래스가 로딩될 때 생성됩니다.")]),v._v(" "),_("li",[v._v("클래스, 변수, 메소드 정보")]),v._v(" "),_("li",[v._v("static 변수")]),v._v(" "),_("li",[v._v("Constant pool - 문자 상수, 타입, 필드, 객체참조가 저장됨")])])]),v._v(" "),_("li",[v._v("Stack Area\n"),_("ul",[_("li",[v._v("컴파일 타임시 할당됩니다.")]),v._v(" "),_("li",[v._v("메소드를 호출할 때 개별적으로 스택이 생성되며 종료시 해제 됩니다.")]),v._v(" "),_("li",[v._v("지역 변수 등 임시 값이 생성되는 영역")]),v._v(" "),_("li",[v._v("Heap 영역에 생성되는 객체의 주소 값을 가지고 있습니다.")])])]),v._v(" "),_("li",[v._v("Heap Area\n"),_("ul",[_("li",[v._v("런타임시 할당 됩니다.")]),v._v(" "),_("li",[v._v("new 키워드로 생성되는 객체와 배열이 저장되는 영역")]),v._v(" "),_("li",[v._v("참조하는 변수가 없어도 바로 지워지지 않습니다. -> GC 를 통해 제거됨.")])])]),v._v(" "),_("li",[v._v("Java : GC, 컴파일/런타임 차이")]),v._v(" "),_("li",[v._v("CS : 프로세스/단일 스레드/멀티 스레드 차이")])]),v._v(" "),_("br"),v._v(" "),_("h3",{attrs:{id:"오버로딩과-오버라이딩-차이는"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#오버로딩과-오버라이딩-차이는"}},[v._v("#")]),v._v(" 오버로딩과 오버라이딩 차이는?")]),v._v(" "),_("blockquote",[_("p",[v._v("배경 & 질문 의도")])]),v._v(" "),_("blockquote",[_("p",[v._v("답변")])]),v._v(" "),_("ul",[_("li",[v._v("오버로딩\n"),_("ul",[_("li",[v._v("반환타입 관계 없음, 메소드명 같음, 매개변수 다름 (자료형 또는 순서)")])])]),v._v(" "),_("li",[v._v("오버라이딩\n"),_("ul",[_("li",[v._v("반환타입, 메소드명, 매개변수 모두 같음")]),v._v(" "),_("li",[v._v("부모 클래스로부터 상속받은 메소드를 재정의하는 것.")])])])]),v._v(" "),_("blockquote",[_("p",[v._v("키워드 & 꼬리 질문")])]),v._v(" "),_("ul",[_("li",[v._v("오버로딩은 생성자가 여러개 필요한 경우 유용합니다.")]),v._v(" "),_("li",[v._v("결합도를 낮추기 위한 방법 중 하나로 interface 사용이 있으며, 이 과정에서 오버라이딩이 적극 사용됩니다.")])]),v._v(" "),_("br"),v._v(" "),_("h3",{attrs:{id:"추상-클래스와-인터페이스-차이는"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#추상-클래스와-인터페이스-차이는"}},[v._v("#")]),v._v(" 추상 클래스와 인터페이스 차이는?")]),v._v(" "),_("blockquote",[_("p",[v._v("배경 & 질문 의도")])]),v._v(" "),_("blockquote",[_("p",[v._v("답변")])]),v._v(" "),_("ul",[_("li",[v._v("abstract class 추상 클래스\n"),_("ul",[_("li",[v._v("단일 상속을 지원합니다.")]),v._v(" "),_("li",[v._v("변수를 가질 수 있습니다.")]),v._v(" "),_("li",[v._v("하나 이상의 abstract 메소드가 존재해야 합니다.")]),v._v(" "),_("li",[v._v("자식 클래스에서 상속을 통해 abstract 메소드를 구현합니다. (extends)\n"),_("ul",[_("li",[v._v("abstract 메소드가 아닌 구현된 메소드를 상속 받을 수 있습니다.")])])])])]),v._v(" "),_("li",[v._v("interface 인터페이스\n"),_("ul",[_("li",[v._v("다중 상속을 지원합니다.")]),v._v(" "),_("li",[v._v("변수를 가질 수 없습니다. 상수는 가능합니다.")]),v._v(" "),_("li",[v._v("모든 메소드는 선언부만 존재합니다.")]),v._v(" "),_("li",[v._v("구현 클래스는 선언된 모든 메소드를 overriding 합니다.")])])])]),v._v(" "),_("blockquote",[_("p",[v._v("키워드 & 꼬리 질문")])]),v._v(" "),_("ul",[_("li",[v._v("java 버전이 올라갈수록 abstract 의 기능을 interface 가 흡수하고 있습니다.\n"),_("ul",[_("li",[v._v("java 8: interface 에서 default method 사용 가능")]),v._v(" "),_("li",[v._v("java 9: interface 에서 private method 사용 가능")])])])]),v._v(" "),_("br"),v._v(" "),_("h3",{attrs:{id:"제네릭이란"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#제네릭이란"}},[v._v("#")]),v._v(" 제네릭이란?")]),v._v(" "),_("ul",[_("li",[v._v("클래스에서 사용할 타입을 클래스 외부에서 설정하도록 만드는 것")]),v._v(" "),_("li",[v._v("제네릭으로 선언한 클래스는, 내가 원하는 타입으로 만들어 사용이 가능함")]),v._v(" "),_("li",[v._v("<안에는 참조자료형(클래스, 인터페이스, 배열)만 가능함 (기본자료형을 이용하기 위해선 wrapper 클래스를 활용해야 함)")]),v._v(" "),_("li",[v._v("참고\n"),_("ul",[_("li",[v._v("Autoboxing, Unboxing")])])])]),v._v(" "),_("br"),v._v(" "),_("h3",{attrs:{id:"접근-제어자란-access-modifier"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#접근-제어자란-access-modifier"}},[v._v("#")]),v._v(" 접근 제어자란? (Access Modifier)")]),v._v(" "),_("blockquote",[_("p",[v._v("배경 & 질문 의도")])]),v._v(" "),_("blockquote",[_("p",[v._v("답변")])]),v._v(" "),_("ul",[_("li",[v._v("public: 모든 접근 허용")]),v._v(" "),_("li",[v._v("protected: 상속받은 클래스 or 같은 패키지만 접근 허용")]),v._v(" "),_("li",[v._v("default: 기본 제한자. 자신 클래스 내부 or 같은 패키지만 접근 허용")]),v._v(" "),_("li",[v._v("private: 외부 접근 불가능. 같은 클래스 내에서만 가능")])]),v._v(" "),_("blockquote",[_("p",[v._v("키워드 & 꼬리 질문")])]),v._v(" "),_("ul",[_("li",[v._v("참고\n"),_("ul",[_("li",[v._v("보통 명시적인 표현을 선호하여 default 는 잘 쓰이지 않습니다.")])])])]),v._v(" "),_("br"),v._v(" "),_("h3",{attrs:{id:"java-컴파일-과정"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java-컴파일-과정"}},[v._v("#")]),v._v(" Java 컴파일 과정")]),v._v(" "),_("blockquote",[_("p",[v._v("배경 & 질문 의도")])]),v._v(" "),_("ul",[_("li",[v._v("CS 에 가까운 질문")])]),v._v(" "),_("blockquote",[_("p",[v._v("답변")])]),v._v(" "),_("ol",[_("li",[v._v("컴파일러가 변환: 소스코드 -> 자바 바이트 코드(.class)")]),v._v(" "),_("li",[v._v("JVM이 변환: 바이트코드 -> 기계어")]),v._v(" "),_("li",[v._v("인터프리터 방식으로 애플리케이션 실행")])]),v._v(" "),_("blockquote",[_("p",[v._v("키워드 & 꼬리 질문")])]),v._v(" "),_("ul",[_("li",[v._v("JIT 컴파일러")])]),v._v(" "),_("br"),v._v(" "),_("h4",{attrs:{id:"vector와-arraylist의-차이는"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#vector와-arraylist의-차이는"}},[v._v("#")]),v._v(" Vector와 ArrayList의 차이는?")]),v._v(" "),_("p",[v._v("Vector : 동기식. 한 스레드가 벡터 작업 중이면 다른 스레드가 벡터 보유 불가능")]),v._v(" "),_("p",[v._v("ArrayList : 비동기식. 여러 스레드가 arraylist에서 동시 작업이 가능")]),v._v(" "),_("p",[_("br"),_("br")]),v._v(" "),_("h4",{attrs:{id:"serialization이란"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#serialization이란"}},[v._v("#")]),v._v(" Serialization이란?")]),v._v(" "),_("p",[v._v("직렬화. 객체의 상태 혹은 데이터 구조를 기록할 수 있는 포맷으로 변환해줌")]),v._v(" "),_("p",[v._v("나중에 재구성 할 수 있게 자바 객체를 JSON으로 변환해주거나 JSON을 자바 객체로 변환해주는 라이브러리")]),v._v(" "),_("p",[_("br"),_("br")]),v._v(" "),_("h4",{attrs:{id:"call-by-value-vs-call-by-reference"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#call-by-value-vs-call-by-reference"}},[v._v("#")]),v._v(" Call by Value vs Call by Reference")]),v._v(" "),_("p",[v._v("값에 의한 호출 : 값을 복사해서 새로운 함수로 넘기는 호출 방식. 원본 값 변경X")]),v._v(" "),_("p",[v._v("참조에 의한 호출 :  주소 값을 인자로 전달하는 호출 방식. 원본 값 변경O")]),v._v(" "),_("p",[_("br"),_("br")]),v._v(" "),_("h4",{attrs:{id:"배열과-연결리스트-차이는"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#배열과-연결리스트-차이는"}},[v._v("#")]),v._v(" 배열과 연결리스트 차이는?")]),v._v(" "),_("p",[v._v("배열은 인덱스를 가짐. 원하는 데이터를 한번에 접근하기 때문에 접근 속도 빠름.")]),v._v(" "),_("p",[v._v("크기 변경이 불가능하며, 데이터 삽입 및 삭제 시 그 위치의 다음 위치부터 모든 데이터 위치를 변경해야 되는 단점 존재")]),v._v(" "),_("p",[v._v("연결리스트는 인덱스 대신에 현재 위치의 이전/다음 위치를 기억함.")]),v._v(" "),_("p",[v._v("크기는 가변적. 인덱스 접근이 아니기 때문에 연결되어 있는 링크를 쭉 따라가야 접근이 가능함. (따라서 배열보다 속도 느림)")]),v._v(" "),_("p",[v._v("데이터 삽입 및 삭제는 논리적 주소만 바꿔주면 되기 때문에 매우 용이함")]),v._v(" "),_("ul",[_("li",[v._v("데이터의 양이 많고 삽입/삭제가 없음. 데이터 검색을 많이 해야할 때 → Array")]),v._v(" "),_("li",[v._v("데이터의 양이 적고 삽입/삭제 빈번함 → LinkedList")])]),v._v(" "),_("p",[_("br"),_("br")]),v._v(" "),_("h4",{attrs:{id:"hash란"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#hash란"}},[v._v("#")]),v._v(" Hash란?")]),v._v(" "),_("p",[v._v("데이터 삽입 및 삭제 시, 기존 데이터를 밀어내거나 채우지 않고 데이터와 연관된 고유한 숫자를 생성해 인덱스로 사용하는 방법")]),v._v(" "),_("p",[v._v("검색 속도가 매우 빠르다")]),v._v(" "),_("p",[_("br"),_("br")]),v._v(" "),_("h4",{attrs:{id:"c-실행-과정"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#c-실행-과정"}},[v._v("#")]),v._v(" C++ 실행 과정")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("전처리 : #define, #include 지시자 해석")])]),v._v(" "),_("li",[_("p",[v._v("컴파일 : 고급 언어 소스 프로그램 입력 받고, 어셈블리 파일 만듬")])]),v._v(" "),_("li",[_("p",[v._v("어셈블 : 어셈블리 파일을 오브젝트 파일로 만듬")])]),v._v(" "),_("li",[_("p",[v._v("링크 : 오브젝트 파일을 엮어 실행파일을 만들고 라이브러리 함수 연결")])]),v._v(" "),_("li",[_("p",[v._v("실행")])])]),v._v(" "),_("p",[_("br"),_("br")]),v._v(" "),_("h4",{attrs:{id:"메모리-성능을-개선하기-위해-생각나는-방법은"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#메모리-성능을-개선하기-위해-생각나는-방법은"}},[v._v("#")]),v._v(" 메모리, 성능을 개선하기 위해 생각나는 방법은?")]),v._v(" "),_("p",[v._v("static을 사용해 선언한다.")]),v._v(" "),_("p",[v._v("인스턴스 변수에 접근할 일이 없으면, static 메소드를 선언하여 호출하자")]),v._v(" "),_("p",[v._v("모든 객체가 서로 공유할 수 있기 때문에 메모리가 절약되고 연속적으로 그 값의 흐름을 이어갈 수 있는 장점이 존재")]),v._v(" "),_("p",[_("br"),_("br")]),v._v(" "),_("h4",{attrs:{id:"클래스와-구조체의-차이는"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#클래스와-구조체의-차이는"}},[v._v("#")]),v._v(" 클래스와 구조체의 차이는?")]),v._v(" "),_("p",[v._v("구조체는 하나의 구조로 묶일 수 있는 변수들의 집합이다.")]),v._v(" "),_("p",[v._v("클래스는 변수뿐만 아니라, 메소드도 포함시킬 수 있음")]),v._v(" "),_("p",[v._v("(물론 함수 포인터를 이용해 구조체도 클래스처럼 만들어 낼 수도 있다.)")]),v._v(" "),_("p",[_("br"),_("br")]),v._v(" "),_("h4",{attrs:{id:"스레드는-어떤-방식으로-생성하나요-장단점도-말해주세요"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#스레드는-어떤-방식으로-생성하나요-장단점도-말해주세요"}},[v._v("#")]),v._v(" 스레드는 어떤 방식으로 생성하나요? 장단점도 말해주세요")]),v._v(" "),_("p",[v._v("생성방법 : Runnable(인터페이스)로 선언되어 있는 클래스 or Thread 클래스를 상속받아서 run() 메소드를 구현해주면 됨")]),v._v(" "),_("p",[v._v("장점 : 빠른 프로세스 생성, 메모리를 적게 사용 가능, 정보 공유가 쉬움")]),v._v(" "),_("p",[v._v("단점 : 데드락에 빠질 위험이 존재")]),v._v(" "),_("p",[_("br"),_("br")]),v._v(" "),_("h4",{attrs:{id:"포인터를-이해하기-쉽도록-설명해주세요"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#포인터를-이해하기-쉽도록-설명해주세요"}},[v._v("#")]),v._v(" 포인터를 이해하기 쉽도록 설명해주세요")]),v._v(" "),_("p",[v._v("포인터는 메모리 주소를 저장하는 변수임")]),v._v(" "),_("p",[v._v("주소를 지칭하고 있는 곳인데, 예를 들면 엘리베이터에서 포인터는 해당 층을 표시하는 버튼이라고 할 수 있음. 10층을 누르면 10층으로 이동하듯, 해당 위치를 가리키고 있는 변수!")]),v._v(" "),_("p",[v._v("포인터를 사용할 때 주의할 점은, 어떤 주소를 가리키고 있어야만 사용이 가능함")])])}),[],!1,null,null,null);_.default=r.exports}}]);