(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{424:function(t,e,r){"use strict";r.r(e);var v=r(12),_=Object(v.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"git-vs-github-vs-gitlab-flow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-vs-github-vs-gitlab-flow"}},[t._v("#")]),t._v(" Git vs GitHub vs GitLab Flow")]),t._v(" "),e("hr"),t._v(" "),e("br"),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git-flow의 종류는 크게 3가지로 분리된다.\n어떤 차이점이 있는지 간단히 알아보자\n")])])]),e("br"),t._v(" "),e("h2",{attrs:{id:"_1-git-flow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-git-flow"}},[t._v("#")]),t._v(" 1. Git Flow")]),t._v(" "),e("p",[t._v("가장 최초로 제안된 Workflow 방식이며, 대규모 프로젝트 관리에 적합한 방식으로 평가받는다.")]),t._v(" "),e("p",[t._v("기본 브랜치는 5가지다.")]),t._v(" "),e("ul",[e("li",[t._v("feature → develop → release → hotfix → master")])]),t._v(" "),e("br"),t._v(" "),e("img",{attrs:{src:"http://nvie.com/img/git-model@2x.png",width:"500"}}),t._v(" "),e("br"),t._v(" "),e("h3",{attrs:{id:"master"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#master"}},[t._v("#")]),t._v(" Master")]),t._v(" "),e("blockquote",[e("p",[t._v("릴리즈 시 사용하는 최종 단계 메인 브랜치")])]),t._v(" "),e("p",[t._v("Tag를 통해 버전 관리를 한다.")]),t._v(" "),e("br"),t._v(" "),e("h3",{attrs:{id:"develop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#develop"}},[t._v("#")]),t._v(" Develop")]),t._v(" "),e("blockquote",[e("p",[t._v("다음 릴리즈 버전 개발을 진행하는 브랜치")])]),t._v(" "),e("p",[t._v("추가 기능 구현이 필요해지면, 해당 브랜치에서 다시 브랜치(Feature)를 내어 개발을 진행하고, 완료된 기능은 다시 Develop 브랜치로 Merge한다.")]),t._v(" "),e("br"),t._v(" "),e("h3",{attrs:{id:"feature"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#feature"}},[t._v("#")]),t._v(" Feature")]),t._v(" "),e("blockquote",[e("p",[t._v("Develop 브랜치에서 기능 구현을 할 때 만드는 브랜치")])]),t._v(" "),e("p",[t._v("한 기능 단위마다 Feature 브랜치를 생성하는게 원칙이다.")]),t._v(" "),e("br"),t._v(" "),e("h3",{attrs:{id:"release"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#release"}},[t._v("#")]),t._v(" Release")]),t._v(" "),e("blockquote",[e("p",[t._v("Develop에서 파생된 브랜치")])]),t._v(" "),e("p",[t._v("Master 브랜치로 현재 코드가 Merge 될 수 있는지 테스트하고, 이 과정에서 발생한 버그를 고치는 공간이다. 확인 결과 이상이 없다면, 해당 브랜치는 Master와 Merge한다.")]),t._v(" "),e("br"),t._v(" "),e("h3",{attrs:{id:"hotfix"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hotfix"}},[t._v("#")]),t._v(" Hotfix")]),t._v(" "),e("blockquote",[e("p",[t._v("Mater브랜치의 버그를 수정하는 브랜치")])]),t._v(" "),e("p",[t._v("검수를 해도 릴리즈된 Master 브랜치에서 버그가 발견되는 경우가 존재한다. 이때 Hotfix 브랜치를 내어 버그 수정을 진행한다. 디버그가 완료되면 Master, Develop 브랜치에 Merge해주고 브랜치를 닫는다.")]),t._v(" "),e("br"),t._v(" "),e("p",[e("code",[t._v("git-flow")]),t._v("에서 가장 중심이 되는 브랜치는 "),e("code",[t._v("master")]),t._v("와 "),e("code",[t._v("develop")]),t._v("이다. (무조건 필요)")]),t._v(" "),e("blockquote",[e("p",[t._v("이름을 변경할 수는 있지만, 통상적으로 사용하는 이름이므로 그대로 사용하도록 하자")])]),t._v(" "),e("p",[t._v("진행 과정 중에 Merge된 "),e("code",[t._v("feature")]),t._v(", "),e("code",[t._v("release")]),t._v(", "),e("code",[t._v("hotfix")]),t._v(" 브랜치는 닫아서 삭제하도록 한다.")]),t._v(" "),e("p",[t._v("이처럼 계획적인 릴리즈를 가지고 스케줄이 짜여진 대규모 프로젝트에는 git-flow가 적합하다. 하지만 대부분 일반적인 프로젝트에서는 불필요한 절차들이 많아 생산성을 떨어뜨린다는 의견도 많은 방식이다.")]),t._v(" "),e("br"),t._v(" "),e("h2",{attrs:{id:"_2-github-flow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-github-flow"}},[t._v("#")]),t._v(" 2. GitHub Flow")]),t._v(" "),e("blockquote",[e("p",[t._v("git-flow를 개선하기 위해 나온 하나의 방식")])]),t._v(" "),e("p",[t._v("흐름이 단순한 만큼, 역할도 단순하다. git flow의 "),e("code",[t._v("hotfix")]),t._v("나 "),e("code",[t._v("feature")]),t._v(" 브랜치를 구분하지 않고, pull request를 권장한다.")]),t._v(" "),e("br"),t._v(" "),e("img",{attrs:{src:"https://miro.medium.com/max/1166/0*6pT5H4vnujVLcy0S.png",width:"500"}}),t._v(" "),e("br"),t._v(" "),e("p",[t._v("Master 브랜치가 릴리즈에 있어 절대적 역할을 한다.")]),t._v(" "),e("p",[t._v("Master 브랜치는 항상 최신으로 유지하며, Stable한 상태로 product에 배포되는 브랜치다.")]),t._v(" "),e("p",[t._v("따라서 Merge 전에 충분한 테스트 과정을 거쳐야 한다. (브랜치를 push하고 Jenkins로 테스트)")]),t._v(" "),e("br"),t._v(" "),e("p",[t._v("새로운 브랜치는 항상 "),e("code",[t._v("Master")]),t._v(" 브랜치에서 만들며, 새로운 기능 추가나 버그 해결을 위한 브랜치는 해당 역할에 대한 이름을 명확하게 지어주고, 커밋 메시지 또한 알기 쉽도록 작성해야 한다.")]),t._v(" "),e("p",[t._v("그리고 Merge 전에는 "),e("code",[t._v("pull request")]),t._v("를 통해 공유하여 코드 리뷰를 진행한다. 이를 통해 피드백을 받고, Merge 준비가 완료되면 Master 브랜치로 요청하게 된다.")]),t._v(" "),e("blockquote",[e("p",[t._v("이 Merge는 바로 product에 반영되므로 충분한 논의가 필요하며 "),e("strong",[t._v("CI")]),t._v("도 필수적이다.")])]),t._v(" "),e("p",[t._v("Merge가 완료되면, push를 진행하고 자동으로 배포가 완료된다. (GitHub-flow의 핵심적인 부분)")]),t._v(" "),e("br"),t._v(" "),e("h4",{attrs:{id:"ci-continuous-integration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ci-continuous-integration"}},[t._v("#")]),t._v(" CI (Continuous Integration)")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("형상관리 항목에 대한 선정과 형상관리 구성 방식 결정")])]),t._v(" "),e("li",[e("p",[t._v("빌드/배포 자동화 방식")])]),t._v(" "),e("li",[e("p",[t._v("단위테스트/통합테스트 방식")])])]),t._v(" "),e("blockquote",[e("p",[t._v("이 세가지를 모두 고려한 자동화된 프로세스를 구성하는 것")])]),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("h2",{attrs:{id:"_3-gitlab-flow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-gitlab-flow"}},[t._v("#")]),t._v(" 3. GitLab Flow")]),t._v(" "),e("blockquote",[e("p",[t._v("github flow의 간단한 배포 이슈를 보안하기 위해 관련 내용을 추가로 덧붙인 flow 방식")])]),t._v(" "),e("br"),t._v(" "),e("img",{attrs:{src:"https://about.gitlab.com/images/git_flow/environment_branches.png",width:"400"}}),t._v(" "),e("br"),t._v(" "),e("p",[t._v("Production 브랜치가 존재하여 커밋 내용을 일방적으로 Deploy 하는 형태를 갖추고 있다.")]),t._v(" "),e("p",[t._v("Master 브랜치와 Production 브랜치 사이에 "),e("code",[t._v("pre-production")]),t._v(" 브랜치를 두어 개발 내용을 바로 반영하지 않고, 시간을 두고 반영한다. 이를 통한 이점은, Production 브랜치에서 릴리즈된 코드가 항상 프로젝트의 최신 버전 상태를 유지할 필요가 없는 것이다.")]),t._v(" "),e("p",[t._v("즉, github-flow의 단점인 안정성과 배포 시기 조절에 대한 부분을 production이라는 추가 브랜치를 두어 보강하는 전력이라고 볼 수 있다.")]),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("h2",{attrs:{id:"정리"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#정리"}},[t._v("#")]),t._v(" 정리")]),t._v(" "),e("p",[t._v("3가지 방법 중 무엇이 가장 나은 방식이라고 선택할 수 없다. 프로젝트, 개발자, 릴리즈 계획 등 상황에 따라 적합한 방법을 택해야 한다.")]),t._v(" "),e("p",[t._v("배달의 민족인 '우아한 형제들'이 github-flow에서 git-flow로 워크플로우를 변경한 것 처럼 ("),e("a",{attrs:{href:"https://woowabros.github.io/experience/2017/10/30/baemin-mobile-git-branch-strategy.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("해당 기사 링크"),e("OutboundLink")],1),t._v(") 브랜칭과 배포에 대한 전략 상황에 따라 변경이 가능한 부분이다.")]),t._v(" "),e("p",[t._v("따라서 각자 팀의 상황에 맞게 적절한 워크플로우를 선택하여 생산성을 높이는 것이 중요할 것이다.")]),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("h4",{attrs:{id:"참고-자료"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#참고-자료"}},[t._v("#")]),t._v(" [참고 자료]")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://ujuc.github.io/2015/12/16/git-flow-github-flow-gitlab-flow/",target:"_blank",rel:"noopener noreferrer"}},[t._v("링크"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://medium.com/extales/git%EC%9D%84-%EB%8B%A4%EB%A3%A8%EB%8A%94-workflow-gitflow-github-flow-gitlab-flow-849d4e4104d9",target:"_blank",rel:"noopener noreferrer"}},[t._v("링크"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://allroundplaying.tistory.com/49",target:"_blank",rel:"noopener noreferrer"}},[t._v("링크"),e("OutboundLink")],1)])]),t._v(" "),e("br"),t._v(" "),e("br")])}),[],!1,null,null,null);e.default=_.exports}}]);